import pygame as pg
from math import fabs 
from random import randint 

#Инициализация
pg.init()

#Значение
#///
width_window = 1080
height_window = 720
height = 90
width = 10
player1_y = 50
player2_y = 40
color = (255,255,255)
temp = 10
radius = 10
x_balls = width_window // 2
y_balls = randint(radius+1,height_window-radius-1)
tg_balls = True #если установить целое число, то оно будет установленно 
speed = 1
piece = 8
#///
def tan():
	global direction
	x = randint(1,4)
	if x == 1:
		direction = False
		return randint(1,4)
	elif x == 2:
		direction = True
		return randint(1,4)
	elif x == 3:
		direction = False
		return -randint(1,4)
	else:
		direction = True
		return -randint(1,4)
win = pg.display.set_mode((width_window,height_window))
pg.display.set_caption("pingpong")
direction = False
if tg_balls == True:
	tg_balls = tan()
b = y_balls - tg_balls * x_balls
k = tg_balls
t1 = True
run = True
#direction True - False - отскок справа
#direction False - True - отскок слева
def restart():
	global speed,x_balls,radius,y_balls,width_window,height_window,direction,k,tg_balls,b,t1
	if x_balls < -4*radius or x_balls > width_window+4*radius:
		speed = 1
		x_balls = width_window // 2
		y_balls = randint(2*radius+1,height_window-2*radius-1)
		direction = False
		b = y_balls - tg_balls * x_balls
		k = tg_balls
		t1 = True
#функция движения шарика
def traffic_circle_y():
	global x_balls, y_balls,height_window,width_window,height,width,tg_balls,b,k,t1,speed,direction
	if  y_balls > height_window-radius or y_balls < radius:
		if t1:
			k = -k
			b = y_balls - k * x_balls
			t1 = False
	if y_balls > height_window//3 and y_balls < height_window - height_window//3:
			t1 = True

def traffic_circle_x():
	global x_balls, y_balls,height_window,width_window,height,width,tg_balls,b,k,t1,speed,direction
	if variable():
		k = -k
		direction = (False == direction)
		b = y_balls - k * x_balls
		speed += 1
	y_balls = k * x_balls + b
	if direction:
		x_balls += speed
	if not direction:
		x_balls -= speed

def variable():
	if fabs(radius+width-x_balls)<=speed and player1_y <=y_balls + piece and y_balls<=player1_y + height + piece:
			return True
	if fabs(-radius-width+width_window-x_balls)<=speed and player2_y <=y_balls + piece and y_balls<= player2_y + height + piece:
			return True
	return False 

while run:
	
	keys = pg.key.get_pressed()

	pg.time.delay(10)
	for event in pg.event.get():
		if event.type == pg.QUIT:
			run = False
	
	if keys[pg.K_ESCAPE]:
		run = False
	if keys[pg.K_w] and player1_y > 0:
		player1_y -= temp
	if keys[pg.K_s] and player1_y < height_window-height:
		player1_y += temp
	if keys[pg.K_UP] and player2_y > 0:
		player2_y -= temp
	if keys[pg.K_DOWN] and player2_y < height_window-height:
		player2_y += temp
	restart()
	traffic_circle_y()
	traffic_circle_x() 
	win.fill((0,0,0))
	pg.draw.line(win, color, [width_window//2, 0], [width_window//2, 15*height_window], 2)
	pg.draw.rect(win, color, (0, player1_y, width, height))
	pg.draw.rect(win, color, (width_window-width, player2_y, width, height))
	pg.draw.circle(win, color, (x_balls,y_balls),radius)
	pg.display.update()

pg.quit()








